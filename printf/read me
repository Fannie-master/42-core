目的: 重新创建一个简化版本printf()支持一组固定的格式说明符并输出到标准输出(stdout), 返回打印的字符数。

必需的转换说明符
Specifier	            Meaning	                    Example Output
%c	        Character	                            'A'
%s	        String	                                "Hello"
%p	        Pointer (printed in hex, prefixed 0x)	0x7ffeef...
%d / %i	    Signed decimal integer有符号十进制整      -123
%u	        Unsigned decimal integer	            123
%x	        Unsigned hex (lowercase)	            7f3a
%X	        Unsigned hex (uppercase)	            7F3A
%%	        Literal percent sign	                %

函数原型
int ft_printf(const char *format, ...);

const char *format 的作用
(1)格式字符串
format 是一个指向 格式字符串 的指针，例如 "Hello %s, age %d"。
格式字符串中包含普通字符和格式化占位符（如 %d、%s),用于指定输出格式。
函数必须通过格式字符串明确知道参数数量，否则会读取越界。例如：
ft_printf("%d %d", 10); // 错误：需要2个参数，但只提供了1个
(2)const 修饰的意义
const 表示函数不会修改格式字符串的内容。增强代码安全性。
(3)字符串类型
使用 char * 是因为 C 语言中字符串以 字符数组 形式存储，以 '\0' 结尾。

...（可变参数）的作用:处理不确定数量的参数
格式字符串中的占位符(如 %d、%s)决定了可变参数的 类型和数量。

可变参数：函数能够接受数量不固定、类型也不固定的参数,标准库中的printf和scanf就是典型的例子
可变参数函数原型里用省略号...表示可变参数部分
要使用可变参数，需要包含<stdarg.h>头文件。

以下为几个关键宏：
va_list args:它是一个类型定义宏，用于声明一个可变参数列表对象
（本质上是一个指针类型）声明了一个名为 args 的可变参数列表变量。

va_start(args, last):函数式宏，用于初始化可变参数列表, 
args是va_list类型的对象, last是最后一个固定参数的名称,从右往左开始。

va_arg(args, type):函数式宏，用于获取可变参数列表中的下一个参数, type指定了参数的类型。
va_end(args)：函数式宏，用于结束可变参数的处理，清理资源。

简单示例：
int ft_printf(const char *format, ...)
{
    va_list args;

    va_start(args, format);
    ...
    va_end(args);
    return (count);
}

使用步骤
声明函数原型：在函数定义时，固定参数至少要有一个，可变参数部分用...表示。
初始化参数列表:在函数内部,声明一个va_list类型的变量,然后用va_start对其进行初始化。
获取参数:使用va_arg按照顺序获取参数,每次调用时都要指定参数类型。
结束处理:使用va_end结束参数的获取。

注意事项
类型安全：由于编译器无法检查可变参数的类型和数量，所以必须依靠格式字符串或者其他方式来确保参数类型的匹配。
参数顺序:参数是从右到左压入栈中的, va_start要能正确定位到第一个可变参数。
可变参数的遍历：要通过某一方式（如格式字符串、参数计数）知道参数的数量和类型。

什么是宏？
在 C 语言里,宏(Macro)是一种预处理指令,它能在编译之前对源代码进行文本替换
(1)对象式宏（Object-like Macro）
它的作用是把标识符替换成值或者表达式，类似常量定义
#define PI 3.14159
#define MAX(a, b) ((a) > (b) ? (a) : (b))
(2) 函数式宏（Function-like Macro）
这类宏看起来像函数调用，但实际上是在预处理阶段进行文本替换
#define SQUARE(x) ((x) * (x))
#define DEBUG(msg) printf("[DEBUG] %s\n", msg)
(3) 宏的一般形式
#define 标识符 替换文本
在编译之前，预处理器会把代码里所有的标识符都替换成替换文本。例如：
#define WIDTH 10
#define HEIGHT (WIDTH + 5)

int area = WIDTH * HEIGHT;  // 预处理后变成 int area = 10 * (10 + 5);

1.循环遍历format字符串并直接打印字符,除非点击%。然后根据格式说明符分派到辅助函数。
int ft_printf(const char *format, ...)
{
    va_list args;
    int     count = 0;
    int     i = 0;

    va_start(args, format);
    while (format[i])
    {
        if (format[i] == '%' && format[i + 1])
        {
            count += handle_format(format[++i], args);
        }
        else
            count += write(1, &format[i], 1);
        i++;
    }
    va_end(args);
    return (count);
}

2.处理每个说明符(handle_format)
int handle_format(char c, va_list args)
{
    if (c == 'c')
        return (ft_putchar(va_arg(args, int)));
    else if (c == 's')
        return (ft_putstr(va_arg(args, char *)));
    else if (c == 'p')
        return (ft_putptr(va_arg(args, void *)));
    else if (c == 'd' || c == 'i')
        return (ft_putnbr(va_arg(args, int)));
    else if (c == 'u')
        return (ft_putunbr(va_arg(args, unsigned int)));
    else if (c == 'x')
        return (ft_puthex(va_arg(args, unsigned int), 0));
    else if (c == 'X')
        return (ft_puthex(va_arg(args, unsigned int), 1));
    else if (c == '%')
        return (ft_putchar('%'));
    return (0);
}

3.需要的辅助函数（每个辅助函数都应该返回打印的字符数）
3.1 ft_putchar(int c, int fd)

3.2 ft_putstr(char *s, int fd)

3.3 ft_putnbr(int n, int fd) 有符号整数

3.4 ft_putunbr(unsigned int n) 无符号整数

3.5 ft_puthex_lower(unsigned int n, int fd) 为了%x

3.6 ft_puthex_upper(unsigned int n, int fd) 为了%X

3.7 ft_puthex_pointer(void *p, int fd) 0x 打印带有前缀的十六进制指针

static int  ft_re(unsigned long address, char *hex, int fd)
{
    int  count; 
    char    c;
    
    count = 0;
    if (address == 0)
        return (count);
    count += ft_re(address / 16, hex, fd);
    c = hex[address % 16];
    count += write(fd, &c, 1);
    return (count);
}

int  ft_puthex_pointer(void *p, int fd)
{
    unsigned long address;
    char  *hex;
    int   count;
    
    if (!p)
        return (write(fd, "(nil)", 5));//(nil) 是对空指针（NULL）的人类可读形式的字符串表示
    address = (unsigned long)p;
    hex = "0123456789abcdef";
    count = 0;
    count  += write(fd, "0x", 2);
    if (address == 0)
        count += (write(fd, "0", 1));
    else
        count += ft_re(address, hex, fd);
    return (count);
}

4. 头文件
5. 编译静态库, libftprintf.a
