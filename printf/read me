✅项目目标
重新创建一个简化版本，printf()支持一组固定的格式说明符并输出到标准输出（stdout），返回打印的字符数。

📌必需的转换说明符
您必须实现这些：


Specifier	        Meaning	                        Example Output
%c	        Character	                            'A'
%s	        String	                                "Hello"
%p	        Pointer (printed in hex, prefixed 0x)	0x7ffeef...
%d / %i	    Signed decimal integer有符号十进制整      -123
%u	        Unsigned decimal integer	            123
%x	        Unsigned hex (lowercase)	            7f3a
%X	        Unsigned hex (uppercase)	            7F3A
%%	        Literal percent sign	                %

🧠函数原型
c
int ft_printf(const char *format, ...);
使用stdarg.h（va_list，，，）来处理可变参数va_start。va_argva_end

🛠️实施计划
1.从主调度程序开始
循环遍历format字符串并直接打印字符，除非你点击%。然后根据格式说明符分派到辅助函数。

c
int ft_printf(const char *format, ...)
{
    va_list args;
    int     count = 0;
    int     i = 0;

    va_start(args, format);
    while (format[i])
    {
        if (format[i] == '%' && format[i + 1])
        {
            count += handle_format(format[++i], args);
        }
        else
            count += write(1, &format[i], 1);
        i++;
    }
    va_end(args);
    return (count);
}
2.处理每个说明符（handle_format）
c

int handle_format(char c, va_list args)
{
    if (c == 'c')
        return (ft_putchar(va_arg(args, int)));
    else if (c == 's')
        return (ft_putstr(va_arg(args, char *)));
    else if (c == 'p')
        return (ft_putptr(va_arg(args, void *)));
    else if (c == 'd' || c == 'i')
        return (ft_putnbr(va_arg(args, int)));
    else if (c == 'u')
        return (ft_putunbr(va_arg(args, unsigned int)));
    else if (c == 'x')
        return (ft_puthex(va_arg(args, unsigned int), 0));
    else if (c == 'X')
        return (ft_puthex(va_arg(args, unsigned int), 1));
    else if (c == '%')
        return (ft_putchar('%'));
    return (0);
}
3.你需要的辅助函数
您应该创建自己的版本：

3.1 ft_putchar(int c, int fd)

3.2 ft_putstr(char *s, int fd)

3.3 ft_putnbr(int n, int fd)– 有符号整数

3.4 ft_putunbr(unsigned int n)– 无符号整数

3.5 ft_puthex_lower(unsigned int n, int fd)- 为了%x

3.6 ft_puthex_upper(unsigned int n, int fd)- 为了%X

3.7 ft_putptr(void *ptr)0x– 打印带有前缀的十六进制指针

💡每个助手都应该返回打印的字符数，这就是构建总返回值的方式。

4.福利：进制转换助手
要打印十六进制、十进制等，您可能需要如下函数：

c
int ft_putnbr_base(unsigned long nbr, char *base);
例如：

c

ft_putnbr_base(255, "0123456789abcdef"); // prints "ff"
🔧 构建说明
您必须编译静态库：

狂欢

ar rcs libftprintf.a *.o
请勿使用。​libtool

用于Makefile自动化构建。

您的.c文件应该被编译成.o，然后捆绑成libftprintf.a。

🧪 测试
使用您的实现与实际情况printf进行测试：

c

ft_printf("Hello %s, %d, 0x%x\n", "world", 42, 255);
printf("Hello %s, %d, 0x%x\n", "world", 42, 255);
查看：

输出匹配吗？

返回值正确吗？

✅ 摘要清单
 %c，，，，，，，，，%s​%p​%d​%i​%u​%x​%X​%%

 用途va_list和write()仅

 返回打印的字符总数

 否printf、sprintf、itoa、malloc或libtool

 创造libftprintf.a​ar

